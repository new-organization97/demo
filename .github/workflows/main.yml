name: GitHub Admin Tool

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - create-team
          - delete-team
          - add-repo
          - remove-repo
          - add-user
          - remove-user
          - create-repo
          - delete-repo
          - user-access
          - list-teams
          - list-repos
          - list-orgs
          - list-users
          - list-users-access

      org:
        description: 'GitHub Organization'
        required: false
        type: choice
        options:
          - new-organization97

      team:
        description: 'Team name (if applicable)'
        required: false

      repo:
        description: 'Repository name (if applicable)'
        required: false

      user:
        description: 'GitHub username (not email!)'
        required: false

      permission:
        description: 'Permission level (if applicable)'
        required: false
        type: choice
        options:
          - nil
          - pull
          - triage
          - push
          - maintain
          - admin

      repo_name:
        description: 'New repo name (for create-repo)'
        required: false

      repo_private:
        description: 'Should repo be private?'
        required: false
        type: choice
        options:
          - "false"
          - "true"

    
jobs:
  github-admin:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "TOKEN=${{ secrets.TOKEN }}" >> $GITHUB_ENV
          echo "GOOGLE_CREDS_PATH=google-creds.json" >> $GITHUB_ENV
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" > google-creds.json

      - name: Run GitHub Admin Tool
  run: |
    # Initialize ARGS string safely
    CMD_ARGS=""

    # Always add --action
    CMD_ARGS+="--action \"${{ github.event.inputs.action }}\""

    # Conditionally add other arguments, using double quotes for robustness
    # This ensures that values with spaces are treated as single arguments
    # and prevents issues with empty strings.

    # --org argument
    if [[ -n "${{ github.event.inputs.org }}" ]]; then
      CMD_ARGS+=" --org \"${{ github.event.inputs.org }}\""
    fi

    # --team argument
    if [[ -n "${{ github.event.inputs.team }}" ]]; then
      CMD_ARGS+=" --team \"${{ github.event.inputs.team }}\""
    fi

    # --repo argument
    if [[ -n "${{ github.event.inputs.repo }}" ]]; then
      CMD_ARGS+=" --repo \"${{ github.event.inputs.repo }}\""
    fi

    # --user argument
    if [[ -n "${{ github.event.inputs.user }}" ]]; then
      CMD_ARGS+=" --user \"${{ github.event.inputs.user }}\""
    fi

    # --permission argument (corrected syntax)
    # Check if not 'nil' and not empty
    if [[ "${{ github.event.inputs.permission }}" != "nil" && -n "${{ github.event.inputs.permission }}" ]]; then
      CMD_ARGS+=" --permission \"${{ github.event.inputs.permission }}\""
    fi

    # --repo-name argument
    if [[ -n "${{ github.event.inputs.repo_name }}" ]]; then
      CMD_ARGS+=" --repo-name \"${{ github.event.inputs.repo_name }}\""
    fi

    # --repo-private flag (only add if 'true')
    if [[ "${{ github.event.inputs.repo_private }}" == "true" ]]; then
      CMD_ARGS+=" --repo-private"
    fi

    echo "Running: python3 git-manager.py ${CMD_ARGS}"
    python3 git-manager.py ${CMD_ARGS}

- name: Clean up credentials
  if: always()
  run: rm -f google-creds.json
